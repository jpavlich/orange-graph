from typing import Dict

type_map: Dict[str, str] = {
    "a networkx graph": "nx.Graph",
    "integer": "int",
    "random_state": "Any",
    "none": "None",
    "graph": "nx.Graph",
    "string": "str",
    "file": "str",
    "iterable": "Iterable",
    "graph (undirected)": "nx.Graph",
    "directory path": "str",
    "optional": "None",
    "boolean": "bool",
    "networkx graph": "nx.Graph",
    "filehandle": "io.IOBase",
    "filename": "str",
    "iterable of node pairs": "Iterable[Tuple[Any]]",
    "networkx graph constructor": "nx.Graph",
    "graph constructor": "nx.Graph",
    "constructor": "nx.Graph",
    "container": "Iterable",
    "data type": "Any",
    "dict of dicts": "Dict[Any, Dict]",
    "class networkx graph": "nx.Graph",
    "graph instance": "nx.Graph",
    "iterable container of nodes": "Iterable[Iterable]",
    "function": "FunctionType",
    "four-tuple of numbers": "Tuple[Number, Number, Number, Number]",
    "sequence": "Iterable",
    "list of graphs": "List[nx.Graph]",
    "container of nodes": "Iterable[Any]",
    "digraph": "nx.DiGraph",
    "node": "Any",
    "iterator of pairs of nodes": "Iterator[Tuple[Any]]",
    "networkx directed graph": "nx.DiGraph",
    "networkx digraph": "nx.DiGraph",
    "bool": "bool",
    "str in": "str",
    "numpy data-type": "Any",
    "numpy data type": "Any",
    "object to be converted": "Any",
    "networkx.graph": "nx.Graph",
    "networkxgraph": "nx.Graph",
    "networkx.digraph": "nx.DiGraph",
    "class": "Any",
    "directed graph": "nx.DiGraph",
    "list of ints": "List[int]",
    "array-like": "Iterable",
    "number": "Number",
    "list of nodes": "List[Any]",
    "node label": "str",
    "list of lists": "List[Iterable[Any]]",
    "dict-like": "Dict",
    "scalar value": "Number",
    "scalar": "Number",
    "numpy array": "Any",
    "dictionary": "Dict",
    "dictionary dictionary of dictionaries": "Dict[Any, Dict]",
    "dictionary of lists": "Dict[Any, List]",
    "string denoting the requesting metric": "str",
    "number of colors to use": "Number",
    "list of tuples": "List[Tuple]",
    "list of three-tuples": "List[Tuple[Any]]",
    "list of integers": "List[int]",
    "list of integer pairs": "List[Tuple[int, int]]",
    "eccentricity dictionary": "Dict",
    "boolean function with two arguments": "FunctionType",
    "list of sets": "List[set]",
    "iterable of lists": "Iterable[List]",
    "positive integer": "int",
    "iterator of strings": "Iterator[str]",
    "numeric": "Number",
    "multidigraph": "nx.MultiDiGraph",
    "iterable of strings": "Iterable[str]",
    "list of list of floats": "List[List[float]]",
    "networkxdigraph": "nx.DiGraph",
    "integer in": "int",
    "container of strings": "Iterable[str]",
    "non-empty set of nodes": "Set",
    "container of two-tuples": "Iterable[Tuple[Any]]",
    "undirected graph": "nx.Graph",
    "digraph-like": "nx.DiGraph",
    "3 tuples": "Tuple[Any]",
    "a set of 2": "Set",
    "dictionary of dictionary of integers": "Dict[Any, Dict]",
    "iterable container": "Iterable",
    "a digraph": "nx.DiGraph",
    "iterables of nodes": "Iterable",
    "tuple of numbers": "Tuple[Number]",
    "iterable of pairs of nodes": "Iterable[Tuple]",
    "nodes": "Iterable",
    "class str": "str",
    "a prime number": "Number",
    "networkx graph instance": "nx.Graph",
    "tuple of integers": "Tuple[int]",
    "tuple of node iterables": "Tuple[Iterable]",
    "generator": "Generator",
    "list of nonnegative integers": "List[int]",
    "the distance of the wanted nodes from source": "Number",
    "real": "float",
    "list of floats of length m": "List[float]",
    "list of keys": "List",
    "iterator": "Iterator",
    "number of nodes in the created graph": "int",
    "this value must be strictly greater than one": "Any",
    "value must be in the interval": "Any",
    "exc networkxerror is raised": "Any",
    "this is set to n": "Any",
    "the total number of nodes in the graph": "int",
    "is set to min_degree": "Any",
    "is set to n": "Any",
    "average degree values": "Any",
    "degree distribution": "Any",
    "and community affiliations": "Any",
    "indicator of random number generation state": "Any",
    "it": "Any",
    "networkx undirected graph": "nx.Graph",
    "default value none": "Any",
    "pair of nodes and p is their adamic-adar index": "Any",
    "the nodes and added to the graph": "Iterable",
    "attributes to add to every edge in cycle": "Iterable",
    "attributes to add to every edge in path": "Iterable",
    "a container of nodes": "Any",
    "attributes to add to every edge in star": "Any",
    "if none": "Any",
    "then each edge has weight 1": "Any",
    "adjacency matrix representation of g": "Any",
    "they may be silently dropped": "Any",
    "a dictionary with adjacency formatted data": "Any",
    "adjacency list formatted graph data": "List",
    "a networkx graph object": "nx.Graph",
    "if true": "Any",
    "and direction not specified in data": "Any",
    "return a directed graph": "nx.DiGraph",
    "and multigraph not specified in data": "nx.MultiGraph",
    "return a multigraph": "nx.MultiGraph",
    "samp dict": "Any",
    "eigenvalues": "Any",
    "an undirected graph": "nx.Graph",
    "each edge has unit weight": "Any",
    "whether the normalized laplacian matrix is used": "bool",
    "tolerance of relative residual in eigenvalue computation": "Any",
    "=============== ========================================": "Any",
    "algebraic connectivity": "Any",
    "graph to find neighbors": "Any",
    "the node whose neighbors will be returned": "Any",
    "iterator of neighbors": "Any",
    "perform better in denser graphs": "Any",
    "the input graph": "Any",
    "edge data key corresponding to the edge weight": "Any",
    "keyed by source and target": "Any",
    "of shortest paths": "Any",
    "shortest path length as the key value": "Any",
    "only return paths with length <= cutoff": "Any",
    "return a number": "Any",
    "will find the lca of all pairs of nodes": "Any",
    "only over pairs of nodes in nbunch": "Any",
    "in g": "Any",
    "in nbunch if provided": "Any",
    "cutoff are returned": "Any",
    "starting node for path": "Any",
    "ending node for path": "Any",
    "any edge attribute not present defaults to 1": "Any",
    "suggestion is ignored": "Any",
    "a generator of all paths between source and target": "Any",
    "single node": "Any",
    "iterable of nodes at which to end path": "Any",
    "only paths of length <= cutoff are returned": "Any",
    "produces no output": "Any",
    "a directed graph": "Any",
    "a directed acyclic graph": "Any",
    "node in g": "Any",
    "a topological order for g": "Any",
    "n is the number of nodes in g": "Any",
    "then use 1 as each edge weight": "Any",
    "float32 for lower memory consumption": "Any",
    "absolute error tolerance": "Any",
    "maximum number of sample node pairs to use for approximation": "Any",
    "dictionary of nodes with betweenness centrality as the value": "Any",
    "two nodes arguments and must return a number": "Any",
    "the networkx graph used to construct the numpy matrix": "Any",
    "to the matrix element": "Any",
    "specified": "Any",
    "then the rows and columns will be the nodes of the graph": "Any",
    "then each row is normalized by the summation of its values": "Any",
    "the ordering will be random": "Any",
    "the attribute matrix": "Any",
    "the matrix is returned as well": "Any",
    "the graph to be analyzed": "Any",
    "a generator of sets of nodes": "Any",
    "one for each attracting component of g": "Any",
    "node attribute key": "Any",
    "the default is all nodes": "Any",
    "assortativity of graph for given attribute": "Any",
    "networkx graph object": "Any",
    "return counts if false": "Any",
    "probabilities if true": "Any",
    "counts": "Any",
    "joint probability of occurrence of attribute pairs": "Any",
    "all nodes": "Any",
    "if not specified": "Any",
    "an arbitrary ordering will be used": "Any",
    "compute average clustering for nodes in this container": "Any",
    "if false include only the nodes with nonzero clustering in the average": "Any",
    "average clustering": "Any",
    'use "in"-': "Any",
    '"out"-degree for source node': "Any",
    '"out"-degree for target node': "Any",
    "a dictionary keyed by degree k with the value of average connectivity": "Any",
    "all nodes in the graph": "Any",
    "a dictionary keyed by node with average neighbors degree value": "Any",
    "is used": "Any",
    "average node connectivity": "Any",
    "otherwise the default method is 'dijkstra'": "Any",
    "children": "Any",
    "height of the tree": "Any",
    "if graph instance": "Any",
    "then cleared before populated": "Any",
    "a balanced r -ary tree of height h": "Any",
    "number of nodes": "Any",
    "number of edges to attach from a new node to existing nodes": "Any",
    "the connected graph math g": "Any",
    "shortest_path_length": "Any",
    "otherwise do not store the value": "Any",
    "all pairs shortest path lengths as a dictionary of dictionaries": "Any",
    "starting node": "Any",
    "ending node": "Any",
    "list of nodes in a shortest path": "Any",
    "shortest path length": "Any",
    "graphs and multigraphs": "Any",
    "regularizer parameter": "Any",
    "the bethe hessian matrix of g": "Any",
    "with paramter r": "Any",
    "higher values give better approximation": "Any",
    "is the number of nodes in g": "Any",
    "otherwise holds the name of the edge attribute used as weight": "Any",
    "if true include the endpoints in the shortest path counts": "Any",
    "nodes to use as sources for shortest paths in betweenness": "Any",
    "nodes to use as targets for shortest paths in betweenness": "Any",
    "this node": "Any",
    "value are enqueued": "Any",
    "to enqueue when visiting each new node": "Any",
    "if true traverse a directed graph in the reverse direction": "Any",
    "specify the maximum search depth": "Any",
    "a generator of edges in the breadth-first-search": "Any",
    "specify starting node for breadth-first search": "Any",
    "predecessors of the node": "Any",
    "successors of the node": "Any",
    "an oriented tree": "Any",
    "generator of lists of edges": "Any",
    "one list for each bicomponent": "Any",
    "generator of sets of nodes": "Any",
    "one set for each biconnected component": "Any",
    "list of nodes in a path from source to target": "Any",
    "the number of nodes": "Any",
    "probability for edge creation": "Any",
    "this function returns a directed graph": "Any",
    "order of the binomial tree": "Any",
    "a binomial tree of $2^n$ vertices and $2^n - 1$ edges": "Any",
    "a position will be assigned to every node in g": "Any",
    "this set will be placed on left": "Any",
    "top": "Any",
    "vertical": "Any",
    "horizontal": "Any",
    "scale factor for positions": "Any",
    "coordinate pair around which to center the layout": "Any",
    "the ratio of the width to the height of the layout": "Any",
    "a dictionary of positions keyed by node": "Any",
    "a sequence of nodes in g": "Any",
    "connected component containing this node will be returned": "Any",
    "demands is to be found": "Any",
    "default value 'demand'": "Any",
    "default value 'capacity'": "Any",
    "default value 'weight'": "Any",
    "default value class binaryheap": "Any",
    "cost of a minimum cost flow satisfying all demands": "Any",
    "so that flowdict is the flow on edge": "Any",
    "and undirected if g and h are undirected": "Any",
    "number of cliques": "Any",
    "size of cliques": "Any",
    "caveman graph": "Any",
    "a graph": "Any",
    "a precomputed dictionary of eccentricities": "Any",
    "list of nodes in center": "Any",
    "search tree": "Any",
    "to true": "Any",
    "chordal edges in the cycle will be created": "Any",
    "the constructed undirected multigraph": "Any",
    "a set containing the maximal cliques in g": "Any",
    "the size of the largest clique in the graph minus one": "Any",
    "the number of vertices the generated graph is to contain": "Any",
    "a list of vertex offsets": "Any",
    "$x_1$ up to $x_m$": "Any",
    "as described above": "Any",
    "if dim<2": "Any",
    "a valueerror is raised": "Any",
    "return only the value for node u": "Any",
    "path calculations": "Any",
    "it is the same as the original formula": "Any",
    "dictionary of nodes with closeness centrality as the value": "Any",
    "a strongly-connected graph": "Any",
    "closeness vitality will be returned": "Any",
    "wiener_index function": "Any",
    "compute clustering for nodes in this container": "Any",
    "clustering coefficient at specified nodes": "Any",
    "a networkx undirected graph": "Any",
    "default value 'community'": "Any",
    "pair of nodes and p is their score": "Any",
    "this defines the order of the edges": "Any",
    "embedding and makes it chordal": "Any",
    "maps each node to a tuple that defines the position": "Any",
    "nodes in the graph": "Any",
    "iterator of common neighbors of u and v in the graph": "Any",
    "as the value": "Any",
    "dictionary of nodes with communicability betweenness as the value": "Any",
    "a new graph": "Any",
    "number of nodes for node set a": "Any",
    "number of nodes for node set b": "Any",
    "return graph of this type": "Any",
    "if n is a container of nodes": "Any",
    "those nodes appear in the graph": "Any",
    "the length of subset_sizes is the number of subsets": "Any",
    "indicating which subset contains the node": "Any",
    "the chordal enhancement of g": "Any",
    "the elimination ordering of nodes of g": "Any",
    "a new graph with the same type as g": "Any",
    "list of networkx graphs": "Any",
    "a graph with the same type as the first graph in list": "Any",
    "strongly_connected_components": "Any",
    "form the scc that the node in c represents": "Any",
    "have weight one": "Any",
    "each list entry corresponds to the degree of a node": "Any",
    "corresponding to the position in deg_sequence": "Any",
    "connected caveman graph": "Any",
    "one for each component of g": "Any",
    "number of double-edge swaps to perform": "Any",
    "swaps in the window and only then check if the graph is still connected": "Any",
    "topology": "Any",
    "the probability of rewiring each edge": "Any",
    "number of attempts to generate a connected graph": "Any",
    "this can be either directed": "Any",
    "undirected": "Any",
    "the constraint of every node is computed": "Any",
    "the graph whose edge will be contracted": "Any",
    "must be a pair of nodes in g": "Any",
    "returned graph": "Any",
    "must be nodes in g": "Any",
    "self-loops on the new node in the returned graph": "Any",
    "n-1+first_label": "Any",
    '"decreasing degree" nodes are sorted by decreasing degree': "Any",
    "is created": "Any",
    "a dictionary keyed by node to the core number": "Any",
    "to be found": "Any",
    "flowdict is the flow edge": "Any",
    "edges of the product of the edge's flow and the edge's weight": "Any",
    "propagate graph and nodes data to the new graph": "Any",
    "nodes to use as sources for current": "Any",
    "nodes to use as sinks for current": "Any",
    "dictionary of nodes with current flow closeness centrality as the value": "Any",
    "be the set complement of s": "Any",
    "specify starting node for basis": "Any",
    "a dictionary with cyjs formatted data": "Any",
    "edge data key to use for weight": "Any",
    "the weight of edges that do not have a weight attribute": "Any",
    "the degree type for source node": "Any",
    "the degree type for target node": "Any",
    "the degree is the sum of the edge weights adjacent to the node": "Any",
    "assortativity of graph by degree": "Any",
    "dictionary of nodes with degree centrality as the value": "Any",
    "the degree values are the index in the list": "Any",
    "joint probability of occurrence of degree pairs": "Any",
    "joint probability": "Any",
    "of occurrence of node degree": "Any",
    "the number of edges": "Any",
    "the component reachable from source": "Any",
    "a generator of edges in the depth-first-search": "Any",
    "the dfs tree": "Any",
    "specify starting node for depth-first search": "Any",
    "a generator of nodes in a depth-first-search post-ordering": "Any",
    "a dictionary with nodes as keys and predecessor nodes as values": "Any",
    "a generator of nodes in a depth-first-search pre-ordering": "Any",
    "a dictionary with nodes as keys and list of successor nodes as values": "Any",
    "diameter of graph": "Any",
    "only contain information for the nodes along a path to target": "Any",
    "otherwise is one of 'random'": "Any",
    "is the teleportation probability used with pagerank": "Any",
    "combinatorial laplacian of g": "Any",
    "each list entry corresponds to the in-degree of a node": "Any",
    "each list entry corresponds to the out-degree of a node": "Any",
    "describes the number of edges": "Any",
    "seed for random number generator": "Any",
    "a directed graph with the specified inputs": "Any",
    "normalized laplacian of g": "Any",
    "a networkx digraph": "Any",
    "if none then all edge weights are 1": "Any",
    "the modularity matrix of g": "Any",
    "a union graph with the same type as g": "Any",
    "ego node of the network)": "Any",
    "the target of the dispersion score if specified": "Any",
    "graph with a dispersion score for each node 'v'": "Any",
    "the graph where dominance is to be computed": "Any",
    "the start node of dominance computation": "Any",
    "start as lists": "Any",
    "node to use as a starting point for the algorithm": "Any",
    "a dominating set for g": "Any",
    "maximum number of attempts to swap edges": "Any",
    "the graph after double edge swaps": "Any",
    "if not specified a spring layout positioning will be computed": "Any",
    "draw the graph in specified matplotlib axes": "Any",
    "draw_networkx for a description of keywords": "Any",
    "for directed graphs": "Any",
    "if true draw arrowheads": "Any",
    "set to true to draw labels on the nodes": "Any",
    "positions should be sequences of length 2": "Any",
    "are drawn": "Any",
    "5=center": "Any",
    "1=tail)": "Any",
    "font size for text labels": "Any",
    "font color string": "Any",
    "font family": "Any",
    "font weight": "Any",
    "the text transparency": "Any",
    "specify text box shape and colors": "Any",
    "draw the graph in the specified matplotlib axes": "Any",
    "edges": "Any",
    "0)": "Any",
    "mapped to colors using the edge_cmap and edge_vmin": "Any",
    "edge_vmax parameters": "Any",
    "edge line style": "Any",
    "minimum and maximum for edge colormap scaling": "Any",
    "choose the style of the arrow heads": "Any",
    "width": "Any",
    "label for legend": "Any",
    "2'": "Any",
    "the minimum margin at the begining of the edge at the source": "Any",
    "the minimum margin at the end of the edge at the target": "Any",
    "items if n in pos}": "Any",
    "same length as nodelist": "Any",
    "scatter for more details": "Any",
    "marker": "Any",
    "one of 'so^>v<dph8'": "Any",
    "in order": "Any",
    "minimum and maximum for node colormap scaling": "Any",
    "colors of node borders": "Any",
    "a planar networkx graph": "Any",
    "number of edges to attach from a new node to existing nodes with probability $p$": "Any",
    "number of edges to attach from a new node to existing nodes with probability $1-p$": "Any",
    "the probability of attaching $m_1$ edges": "Any",
    "the desired number of nodes in the graph": "Any",
    "the probability for retaining the edge of the replicated node": "Any",
    "return value of specified node": "Any",
    "a dictionary of eccentricity values keyed by node": "Any",
    "dictionary of edges with betweenness centrality as the value": "Any",
    "a directed/undirected graph/multigraph": "Any",
    "the graph are searched": "Any",
    "the direction is respected": "Any",
    "but not reported": "Any",
    ")": "Any",
    "not in nbunch1": "Any",
    "algorithms that support the cutoff parameter meth edmonds_karp": "Any",
    "and target were provided": "Any",
    "dictionary of edge tuples with betweenness centrality as the value": "Any",
    "source node for the flow": "Any",
    "sink node for the flow": "Any",
    "a generator of edge independent paths": "Any",
    "if specified": "Any",
    "only consider paths of length <= cutoff": "Any",
    "edges not present in g are ignored": "Any",
    "changes to g are reflected in the view": "Any",
    "undirected graphs when computing neighbors of v": "Iterable[nx.Graph]",
    "the effective size of every node is computed": "Any",
    "nodes in the graph g": "Iterable",
    "a single node": "Any",
    "include all neighbors of distance<=radius from n": "Iterable[Any]",
    "if false": "bool",
    "do not include center node in graph": "Any",
    "if true use both in- and out-neighbors of directed graphs": "bool",
    "distance from the node n": "Number",
    "maximum number of iterations in power method": "Any",
    "error tolerance used to check convergence in power method iteration": "Any",
    "starting value of eigenvector iteration for each node": "Any",
    "dictionary of nodes with eigenvector centrality as the value": "Any",
    "all edge weights are considered equal": "Any",
    "the default value of 0 implies machine precision": "Any",
    "if a constructor": "Any",
    "call it to create an empty graph": "Any",
    "the nodes of this graph will be colored": "Any",
    "in the graph": "Any",
    "either directed": "Any",
    "starting node for circuit": "Any",
    "this option is ignored unless g is a multigraph": "Any",
    "an iterator over edges in the eulerian circuit": "Any",
    "the graph in which to look for an eulerian path": "Any",
    "starting nodes": "Any",
    "the default yields edge 2-tuples": "Any",
    "networkx multigraph": "Any",
    "the list of expected degrees": "Any",
    "set to false to remove the possibility of self-loop edges": "Any",
    "number of edges with which a new node attaches to existing nodes": "Any",
    "p + q < 1": "Any",
    '"center" for the set of nodes with eccentricity equal to the radius': "Any",
    'list of nodes for "center" and "periphery"': "Any",
    "fiedler vector": "Any",
    "the graph to check whether is at-free": "Any",
    "not": "Any",
    "the direction of traversal on that edge": "Any",
    "a chordal networkx graph": "Any",
    "source node to look for induced nodes": "Any",
    "destination node to look for induced nodes": "Any",
    "the set of induced nodes in the path from s to t in g": "Any",
    "if none the weight defaults to 1": "Any",
    "flow hierarchy value": "Any",
    "between nodes": "Any",
    "will be inf": "Any",
    "a dictionary of dictionaries adjacency representation": "Any",
    "otherwise this routine assumes the edge data are singletons": "Any",
    "a dictionary of lists adjacency representation": "Any",
    "edge tuples": "Any",
    "data in graph6 format": "Any",
    "without a trailing newline": "Any",
    "a nested tuple representing a rooted tree": "Any",
    "search order from the root node": "Any",
    "an adjacency matrix representation of a graph": "Any",
    "the weight of a single edge joining the vertices": "Any",
    "an edge list representation of a graph": "Any",
    "directed case)": "Any",
    "no edge attributes are added to the graph": "Any",
    "zero and *n* - 1": "Any",
    "inclusive": "Any",
    "have the same type as the matrix entry": "Any",
    "data in sparse6 format": "Any",
    "to move nodes farther apart": "Any",
    "random initial positions": "Any",
    "valueerror raised if fixed specified and pos not": "Any",
    "maximum number of iterations taken": "Any",
    "the iteration stops if the error is below this threshold": "Any",
    "then all edge weights are 1": "Any",
    "if scale is none": "Any",
    "no rescaling is performed": "Any",
    "not used unless fixed is none": "Any",
    "dimension of layout": "Any",
    "random": "Any",
    '"g-u" and "v" in h is renamed "h-v"': "Any",
    "the full join graph with the same type as g": "Any",
    "branching factor of the tree": "Any",
    "number of nodes in the tree": "Any",
    "an r-ary tree with n nodes": "Any",
    "number of nodes in the graph": "Any",
    "mean cluster size": "Any",
    "the variance of cluster size distribution is s/v": "Any",
    "probabilty of intra cluster connection": "Any",
    "probability of inter cluster connection": "Any",
    "whether to create a directed graph": "Any",
    "gaussian random partition graph": "Any",
    "the number of nodes in the first bipartite set": "Any",
    "the number of nodes in the second bipartite set": "Any",
    "probabilities for connecting nodes to each attribute": "Any",
    "compute the generalized degree for nodes in this container": "Any",
    "triangle multiplicity": "Any",
    "separator for node labels": "Any",
    "lines of data in adjlist format": "Any",
    "values corresponding to the keys": "Any",
    "encoding for text data": "Any",
    "if true use line breaks and indenting in output xml": "Any",
    '2draft"': "Any",
    "the graph to be converted to gml": "Any",
    "newlines are not appended": "Any",
    "lines of data in multiline adjlist format": "Any",
    "iterable of nodes": "Any",
    "threshold value": "Any",
    "dimension of graph": "Any",
    "node positions as a dictionary of tuples keyed by node": "Any",
    "node weights as a dictionary of numbers keyed by node": "Any",
    "used": "Any",
    "math r^ is used": "Any",
    "attribute name": "Any",
    "an undirected graph for which to compute the average global efficiency": "Any",
    "connection between nodes and a *shorter* path length": "Any",
    "weights": "Any",
    "the global reaching centrality of the graph": "Any",
    "the number of nodes for the generated graph": "Any",
    "the attachment kernel": "Any",
    "if true return a directed graph": "Any",
    "the redirection probability": "Any",
    "graphs": "Any",
    "a networkx graph representing the gomory-hu tree of the input graph": "Any",
    "graph with two directed edges for each undirected edge": "Any",
    "the damping factor": "Any",
    "by default": "Any",
    "a uniform distribution is used": "Any",
    "if none weights are set to 1": "Any",
    "be the same as the personalization dict": "Any",
    "google matrix of the graph": "Any",
    "0 is assumed to be the null graph": "Any",
    "func find_cliques": "Any",
    "attributes are not considered": "Any",
    "default edge insertion cost of 1 is used": "Any",
    "distance under": "Any",
    "equal to upper_bound exists": "Any",
    "* 'dsatur'": "Any",
    "on the values in the colors argument": "Any",
    "to the corresponding nodes on the opposite grid boundaries": "Any",
    "of dim": "Any",
    "centrality is to be calculated": "Any",
    "is the number of nodes in g and c is the number of nodes in c": "Any",
    "group betweenness centrality of the group c": "Any",
    "group closeness centrality of the group s": "Any",
    "group degree centrality of the group s": "Any",
    "group in-degree centrality of the group s": "Any",
    "group out-degree centrality of the group s": "Any",
    "only over the nodes in nbunch": "Any",
    "then each edge will have distance equal to 1": "Any",
    "dictionary of nodes with harmonic centrality as the value": "Any",
    "connected component containing this node will be considered": "Any",
    "the graph to find an euler path in": "Any",
    "true if g has an eulerian path": "Any",
    "each integer corresponds to the degree of a node": "Any",
    "directed graphs are not allowed": "Any",
    "the number of rows of hexagons in the lattice": "Any",
    "the number of columns of hexagons in the lattice": "Any",
    "so these graphs have fewer nodes as boundary nodes are identified": "Any",
    "the edges don't overlap so much": "Any",
    "if graph is directed": "Any",
    "edges will point up": "Any",
    "right": "Any",
    "starting value of each node for power method iteration": "Any",
    "normalize results by the sum of all of the values": "Any",
    "the number of nodes in the graph will be 2 ** n": "Any",
    "start": "Any",
    "dictionary of nodes with in-degree centrality as values": "Any",
    "if false": "Any",
    "+1 occurs at both nodes": "Any",
    "should be positive so that the orientation can provide the sign": "Any",
    "the incidence matrix of g": "Any",
    "the modified edge in the graph": "Any",
    "the previous closeness centrality for all nodes in the graph": "Any",
    "if true the edge was inserted": "Any",
    "otherwise it was deleted from the graph": "Any",
    "changes to the graph g will be reflected in the view": "Any",
    "a node in the graph g": "Any",
    "a new graph with the same type as the first graph in list": "Any",
    "the inverse line graph of g": "Any",
    "the graph to test": "Any",
    "a boolean that is true if g is an arborescence": "Any",
    "otherwise": "Any",
    "true if the graph is biconnected": "Any",
    "false otherwise": "Any",
    "the directed graph to test": "Any",
    "a boolean that is true if g is a branching": "Any",
    "true if g is a chordal graph and false otherwise": "Any",
    "true if the graph is connected": "Any",
    "a sequence of integer node in-degrees": "Any",
    "a sequence of integer node out-degrees": "Any",
    "true if in and out-sequences are digraphic false if not": "Any",
    "an iterable of nodes in the graph g": "Any",
    "an undirected bipartite graph": "Any",
    "set of edges to be checked": "Any",
    "a boolean that is true if g is a forest": "Any",
    "a sequence of integer node degrees": "Any",
    '"hh" to the havel-hakimi algorithm': "Any",
    "true if the sequence is a valid degree sequence and false if not": "Any",
    "a node in g": "Any",
    "true if and only if n has no neighbors": "Any",
    "for n1 and n2 as inputs": "Any",
    "of the edges under consideration": "Any",
    "edge connectivity to test for": "Any",
    "the graph to test for local -connectedness": "Any",
    "connectivity requirement": "Any",
    "more time but less memory": "Any",
    "matching": "Any",
    "a list of integers": "Any",
    "true if deg_sequence is a multigraphic degree sequence and false if not": "Any",
    "then every edge in g is tested": "Any",
    "the attribute name used to query for edge weights": "Any",
    "true if the sequence is a pseudographic degree sequence and false if not": "Any",
    "true if the graph is semiconnected": "Any",
    "a list of one": "Any",
    "more nodes in the graph g": "Any",
    "true if the graph is strongly connected": "Any",
    "a boolean that is true if g is a tree": "Any",
    "true if deg_sequence is graphical and false if not": "Any",
    "in a graph": "Any",
    "in degree sequence contains the in degrees of nodes": "Any",
    "out degree sequence contains the out degrees of nodes": "Any",
    "degree *l*": "Any",
    "true if the graph is weakly connected": "Any",
    "pair of nodes and p is their jaccard coefficient": "Any",
    "none selects the most compact representation": "Any",
    "jit json string": "Any",
    "json graph object": "Any",
    "the provided instance will be cleared": "Any",
    "networkx graph built from create_using if provided": "Any",
    "integers": "Any",
    "rooted trees given in the input": "Any",
    "number of edges joining nodes of degree *k* with nodes of degree *l*": "Any",
    "a graph with the specified joint degree dictionary": "Any",
    "values": "Any",
    "if not specified return the main core": "Any",
    "precomputed core numbers for the graph g": "Any",
    "the k-core subgraph": "Any",
    "the order of the corona": "Any",
    "the k-corona subgraph": "Any",
    "if not specified return the main crust": "Any",
    "the k-crust subgraph": "Any",
    "desired edge connectivity": "Any",
    "correspondings to the weight": "Any",
    "third item in each tuple is a dictionary": "Any",
    "for details": "Any",
    "see func partial_k_edge_augmentation": "Any",
    "will have k-edge-connectivity in the graph g": "Any",
    "of g that is k-edge-connected": "Any",
    "size of attribute set to assign to each node": "Any",
    "if not specified return the outer shell": "Any",
    "the k-shell subgraph": "Any",
    "the order of the truss": "Any",
    "the k-truss subgraph": "Any",
    "the distance is computed using shortest_path_length": "Any",
    "circular_layout for dim >= 2 and a linear layout for dim == 1": "Any",
    "attenuation factor": "Any",
    "dictionary must have an value for every node": "Any",
    "starting value of katz iteration for each node": "Any",
    "if true normalize the resulting values": "Any",
    "dictionary of nodes with katz centrality as the value": "Any",
    "subgraph": "Any",
    "graph g )": "Any",
    "component of g": "Any",
    "the laplacian matrix of g": "Any",
    "an undirected graph with 4": "Any",
    "more nodes": "Any",
    "an edge is rewired approximatively niter times": "Any",
    "distance to the diagonal matrix": "Any",
    "ensure connectivity for the latticized graph when set to true": "Any",
    "the latticized graph": "Any",
    "defaults to the identity function": "Any",
    "multigraph": "Any",
    "the line graph of g": "Any",
    "dictionary of nodes with centrality as the value": "Any",
    "yield a 3-tuple": "Any",
    "all edges have weight 1": "Any",
    "directed": "Any",
    "an undirected graph for which to compute the average local efficiency": "Any",
    "a node in the directed graph g": "Any",
    "times but don't want the paths to be recomputed each time": "Any",
    "g": "Any",
    "node1": "Any",
    "node2 nodes in the graph": "Any",
    "returned if no common ancestor between node1 and node2": "Any",
    "position in the euclidean plane": "Any",
    "determines the number of nodes in the graph n^2": "Any",
    "source of the flow": "Any",
    "destination of the flow": "Any",
    "with maximum weight among all maximum-cardinality matchings": "Any",
    "if key not found": "Any",
    "uses 1 as weight": "Any",
    "a maximal matching of the graph": "Any",
    "must be independent": "Any",
    "list of nodes that are part of a maximal independent set": "Any",
    "the graph to be searched": "Any",
    "the edge attribute used to in determining optimality": "Any",
    "the attribute attr": "Any",
    "passed to attr )": "Any",
    "a maximum branching": "Any",
    "considered to have infinite capacity": "Any",
    "the function has to accept at least three": "Any",
    "computes the maximum flow": "Any",
    "net outflow from the source": "Any",
    "each edge": "Any",
    "a maximum spanning arborescence": "Any",
    "a spanning forest is found": "Any",
    "the default is 'kruskal'": "Any",
    "if g is not a multigraph": "Any",
    "this is ignored": "Any",
    "if true yield the edge data along with the edge": "Any",
    "if ignore_nan is true then that edge is ignored instead": "Any",
    "or if data is false": "Any",
    "data key to use for edge weights": "Any",
    "a maximum spanning tree": "Any",
    "forest": "Any",
    "matching module": "Any",
    "for given nodes u and v among the edges of minimum edge cover": "Any",
    "a minimum branching": "Any",
    "value of the minimum cut": "Any",
    "a partitioning of the nodes that defines a minimum cut": "Any",
    "name of the edge attribute to use for edge weights": "Any",
    "if removed": "Any",
    "would destroy all paths between source and target": "Any",
    "a minimum spanning arborescence": "Any",
    "a minimum spanning tree": "Any",
    "pairs of items": "Any",
    "joint probability of occurrence of values in xy": "Any",
    "computed paths may begin from any one of the start nodes": "Any",
    "dictionary of shortest paths keyed by target": "Any",
    "dict keyed by node to shortest path length to nearest source": "Any",
    "the desired mycielski graph": "Any",
    "the n_th mycielski graph": "Any",
    "a simple": "Any",
    "undirected networkx graph": "Any",
    "must be a non-negative integer": "Any",
    "the mycielskian of g after the specified number of iterations": "Any",
    "the graph is therefore $n^2$": "Any",
    "other node within this lattice distance": "Any",
    "the number of long-range connections for each node": "Any",
    "connecting to a node at lattice distance $d$ is $1/d^r$": "Any",
    "dimension of grid": "Any",
    "true if a negative edge cycle exists": "Any",
    "otherwise false": "Any",
    "the probability of adding a new edge for each edge": "Any",
    "the node attribute key": "Any",
    "a set of nodes in the component of g containing node n": "Any",
    "and target are provided": "Any",
    "source node": "Any",
    "target node": "Any",
    "generator of node disjoint paths": "Any",
    "a dictionary with node-link formatted data": "Any",
    "node-link formatted graph data": "Any",
    "key='key'": "Any",
    "link='links')": "Any",
    "a iterator over nodes with self loops": "Any",
    "graph to find non-existent edges": "Any",
    "iterator of edges that are not in the graph": "Any",
    "iterator of nodes in the graph that are not neighbors of the node": "Any",
    "graph must be binary": "Any",
    "symmetric": "Any",
    "connected": "Any",
    "and without self-loops": "Any",
    "detection algorithm to set it": "Any",
    "order of the desired tree": "Any",
    "be returned": "Any",
    "list of adjacency matrices": "Any",
    "the normalized laplacian matrix of g": "Any",
    "entries must be one of 'directed'": "Any",
    "the decorated function": "Any",
    "the number of attracting components in g": "Any",
    "number of connected components": "Any",
    "number of nonisomorphic graphs for the given order": "Any",
    "the number of selfloops": "Any",
    "number of strongly connected components": "Any",
    "number of weakly connected components": "Any",
    "the corresponding attribute must be an integer": "Any",
    "joint": "Any",
    "probability of occurrence of node attribute pairs": "Any",
    "random graph": "Any",
    "coefficient": "Any",
    "the small-work coefficient": "Any",
    "a simple graph without self loops": "Any",
    "parallel edges": "Any",
    "contiguous integers starting at 1": "Any",
    "maximum edit distance to consider": "Any",
    "optimal edit path cost": "Any",
    "less than": "Any",
    "equal to the previous minimum cost": "Any",
    "dictionary of nodes with out-degree centrality as values": "Any",
    "maximum number of iterations in power method eigenvalue solver": "Any",
    "error tolerance used to check convergence in power method solver": "Any",
    "starting value of pagerank iteration for each node": "Any",
    "dangling dict to be the same as the personalization dict": "Any",
    "dictionary of nodes with pagerank as value": "Any",
    "input data in adjlist format": "Any",
    "marker for comment lines": "Any",
    "the default is whitespace": "Any",
    "convert nodes to this type": "Any",
    "the graph corresponding to the lines in adjacency list format": "Any",
    "input data in edgelist format": "Any",
    "key names and types for edge data": "Any",
    "the graph corresponding to lines": "Any",
    "data in gml format": "Any",
    "default value 'label'": "Any",
    "default": "Any",
    "the parsed graph": "Any",
    "contents of a graphml file)": "Any",
    "convert node ids to this type": "Any",
    "otherwise a multigraph": "Any",
    "multidigraph is returned": "Any",
    "data in leda format": "Any",
    "input data in multiline adjlist format": "Any",
    "the graph corresponding to the lines in multiline adjacency list format": "Any",
    "data in pajek format": "Any",
    "the total number of nodes in the final graph": "Any",
    "the number of nodes in the initial clique": "Any",
    "must be a number in the between zero and one": "Any",
    "if an iterable of nodes": "Any",
    "the center is the first": "Any",
    "if states is none": "Any",
    "as values": "Any",
    "dictionary of nodes with percolation centrality as the value": "Any",
    "list of nodes in periphery": "Any",
    "planarembedding": "Any",
    "the positions are selected accordingly": "Any",
    "number of groups": "Any",
    "number of vertices in each group": "Any",
    "probability of connecting vertices within a group": "Any",
    "probability of connected vertices between groups": "Any",
    "planted l-partition graph": "Any",
    "a networkx simple graph object": "Any",
    "the power to which to raise the graph g": "Any",
    "the number of random edges to add for each new node": "Any",
    "probability of adding a triangle after adding a random edge": "Any",
    "source and target are returned": "Any",
    "keyed by node": "Any",
    "of predecessors in the shortest path": "Any",
    "pair of nodes and p is their preferential attachment score": "Any",
    "or an iterable over python strings": "Any",
    "predecessors # doctest +skip": "Any",
    "the randomly generated uuid of the root node": "Any",
    "the input graph should be bipartite": "Any",
    "nodes to project onto": "Any",
    "label of the neighbor": "Any",
    "a graph that is the projection onto the given nodes": "Any",
    "specified node relation": "Any",
    "one block of the partition": "Any",
    "according to the edge set of g": "Any",
    "block represents": "Any",
    "g appears in the edges of the quotient graph": "Any",
    "partition": "Any",
    "radius of graph": "Any",
    "triangle degree of a node": "Any",
    "deg_sequence": "Any",
    "the order of the cograph": "Any",
    "a random graph containing no path on four vertices": "Any",
    "sequence of degrees": "Any",
    "maximum number of tries to create a graph": "Any",
    "corresponding to the position in the sequence": "Any",
    "distance threshold value": "Any",
    "a dictionary keyed by node with node positions as values": "Any",
    "which represents probability": "Any",
    "number of graph nodes": "Any",
    "a randomly generated undirected graph": "Any",
    "the number of nodes in the returned graph": "Any",
    "the out-degree of each node in the returned graph": "Any",
    "exc valueerror is raised": "Any",
    "self-loops are allowed when generating the graph": "Any",
    "the expected number of nodes in the backbone": "Any",
    "probability of adding an edge to the backbone": "Any",
    "probability of adding an edge one level beyond backbone": "Any",
    "sizes of groups": "Any",
    "probability of edges with in groups": "Any",
    "probability of edges between groups": "Any",
    "random partition graph of size sum": "Any",
    "exponent of the power law": "Any",
    "number of attempts to adjust the sequence to make it a tree": "Any",
    "an edge is rewired approximately niter times": "Any",
    "when true": "Any",
    "ensure connectivity for the randomized graph": "Any",
    "the randomized graph": "Any",
    "the degree of each node": "Any",
    "the value of $n \\times d$ must be even": "Any",
    "will be all possible intra-shell edges": "Any",
    "a positive integer representing the number of nodes in the tree": "Any",
    "bz2 will be uncompressed": "Any",
    "the character used to indicate the start of a comment": "Any",
    "convert node data from strings to specified type": "Any",
    "tuples specifying dictionary key names and types for edge data": "Any",
    "convert edge data from strings to specified type and use as 'weight'": "Any",
    "specify which encoding to use when reading file": "Any",
    "other type specified with create_using": "Any",
    "bz2 will be compressed": "Any",
    "convert node ids to this type if not none": "Any",
    'instead of the node "id" attribute as the networkx node label': "Any",
    "the filename": "Any",
    "filehandle to read from": "Any",
    "filename to write": "Any",
    "if the file contains multiple lines then a list of graphs is returned": "Any",
    "convert graphml edge ids to this type as key of multi-edges": "Any",
    "uncompressed": "Any",
    "convert edge data to this type": "Any",
    "directory": "Any",
    "filename to read": "Any",
    "edge comprising that feature": "Any",
    "silently ignore missing": "Any",
    "unsupported geometry in features": "Any",
    "will be uncompressed": "Any",
    "a networkx directed graph": "Any",
    "compute reciprocity for nodes in this container": "Any",
    "reciprocity keyed by node label": "Any",
    "shortest path": "Any",
    "as returned by floyd_warshall_predecessor_and_distance": "Any",
    "if source and target are the same": "Any",
    "an empty list is returned": "Any",
    "a networkx graph read from gexf data": "Any",
    "a networkx graph with relabed nodes": "Any",
    "a partial mapping is allowed": "Any",
    "if true return a copy": "Any",
    "if false relabel the nodes in place": "Any",
    "probabilty of rewiring each edge": "Any",
    "relaxed caveman graph": "Any",
    "each row is a position": "Any",
    "the size of the resulting extent in all directions": "Any",
    "a node within graph g": "Any",
    "exclusive of node a": "Any",
    "weight cannot be zero": "Any",
    "value of effective resistance distance": "Any",
    "pair of nodes and p is their resource allocation index": "Any",
    "nodes not present in g are ignored": "Any",
    "reversed in place": "Any",
    "the reversed g": "Any",
    "undirected graph with neither parallel edges nor self-loops": "Any",
    "normalize using randomized network as in _": "Any",
    "null-model for normalization": "Any",
    "a dictionary": "Any",
    "keyed by degree": "Any",
    "with rich-club coefficient values": "Any",
    "ring of cliques graph": "Any",
    "a node in h": "Any",
    "the rooted product of g and h with a specified root in h": "Any",
    "the graph used to compute the s-metric": "Any",
    "normalize the value": "Any",
    "the s-metric of the graph": "Any",
    "number of nodes in graph": "Any",
    "chosen randomly according to the in-degree distribution": "Any",
    "distribution": "Any",
    "chosen randomly according to the out-degree distribution": "Any",
    "bias for choosing nodes from in-degree distribution": "Any",
    "bias for choosing nodes from out-degree distribution": "Any",
    "if a graph constructor": "Any",
    "call it to construct an empty graph": "Any",
    "a networkx connected and undirected graph": "Any",
    "dictionary keyed by node with second order centrality as the value": "Any",
    "or three-tuples": "Any",
    "return edge keys with each edge": "Any",
    "only relevant if data is not true": "Any",
    "an iterator over all selfloop edges": "Any",
    "for non-multigraphs": "Any",
    "the keys must be tuples of the form": "Any",
    "name of the edge attribute to set if values is a scalar": "Any",
    "pairs used to update the node's attributes": "Any",
    "name of the node attribute to set if values is a scalar": "Any",
    "list of node lists for each shell": "Any",
    "other dimension values result in a valueerror": "Any",
    "paths for each possible starting node": "Any",
    "paths to all possible nodes": "Any",
    "of dictionaries with path": "Any",
    "source nodes": "Any",
    "target nodes": "Any",
    "shortest path length from source to that target": "Any",
    "shortest to longest": "Any",
    "the small-world coefficient of g": "Any",
    "each cycle is represented by a list of nodes along the cycle": "Any",
    "v": "Any",
    "ignored": "Any",
    "direct neighbors": "Any",
    "maximum number of iterations": "Any",
    "this amount": "Any",
    "the algorithm halts": "Any",
    "the similarity value for the given pair of nodes": "Any",
    "dictionary of shortest path lengths keyed by target": "Any",
    "dict keyed by node to shortest path length from source": "Any",
    "keyed by target": "Any",
    "dict keyed by node to shortest path length to source": "Any",
    "target node for path": "Any",
    "is an exponential distribution with rate parameter math \lambda=1": "Any",
    "an undirected simple graph": "Any",
    "the stretch of the spanner": "Any",
    "the edge attribute to use as distance": "Any",
    "values in": "Any",
    "are 'identity' and 'modularity'": "Any",
    "indicator of numpy random number generation state": "Any",
    "a graph with a similar eigenvector structure of the input one": "Any",
    "spectral ordering of nodes": "Any",
    "lower values result in more compressed spiral layouts": "Any",
    "nodes will be plotted equidistant from each other": "Any",
    "a dictionary keyed by node with the square clustering coefficient value": "Any",
    "sizes of blocks": "Any",
    "and it must be symmetric if the graph is undirected": "Any",
    "whether to include self-loops": "Any",
    "use the sparse heuristic to speed up the generator": "Any",
    "stochastic block model graph of size sum": "Any",
    "modified in-place": "Any",
    "has a weight": "Any",
    "it must be a a positive number": "Any",
    "considered to have unit weight": "Any",
    "the sum of weights of edges in a minimum cut": "Any",
    "dictionary of nodes with subgraph centrality as the value": "Any",
    "should appear in the view": "Any",
    "returns true if the edge should appear in the view": "Any",
    "a read-only graph view of the input graph": "Any",
    "higher numbers provide more detail": "Any",
    "true to run doctests in code modules": "Any",
    "use only nodes specified in nodelist": "Any",
    "if g is a multigraph": "Any",
    "the edgedata is a dict for each pair": "Any",
    "nodes is used": "Any",
    "if true add '>>graph6<<' bytes to head of data": "Any",
    "an undirected graph object representing a tree": "Any",
    "the node in t to interpret as the root of the tree": "Any",
    "representation": "Any",
    "pygraphviz agraph": "Any",
    "a multigraph from a multigraph": "Any",
    "the networkx graph used to construct the numpy array": "Any",
    "then the numpy default is used": "Any",
    "the default is to sum the weights of the multiple edges": "Any",
    "value 1 is used instead": "Any",
    "one might prefer nonedges to have some other value": "Any",
    "such as nan": "Any",
    "graph adjacency matrix": "Any",
    "the graph with specified edge data as a numpy recarray": "Any",
    "the networkx graph used to construct the pandas dataframe": "Any",
    "graph edge list": "Any",
    "numpy default is used": "Any",
    "see _ for details": "Any",
    "if true add '>>sparse6<<' bytes to head of data": "Any",
    "self-loops are not created": "Any",
    "transitivity": "Any",
    "assume the entire graph has exactly one source and use that": "Any",
    "under root that have a lowest common ancestor": "Any",
    "in pairs and lca is their lowest common ancestor": "Any",
    "g must be an oriented tree": "Any",
    "the root of the tree": "Any",
    "tree formatted graph data": "Any",
    "the name of a triad": "Any",
    "dictionary with triad names as keys and number of occurrences as values": "Any",
    "compute triangles for nodes in this container": "Any",
    "number of triangles keyed by node label": "Any",
    "the number of rows in the lattice": "Any",
    "the number of columns in the lattice": "Any",
    "m >= 3": "Any",
    "n >= 5 and are allowed but misaligned if m": "Any",
    "n are odd": "Any",
    "the number of vertices": "Any",
    "must be less than": "Any",
    "equal to n": "Any",
    "probability of connecting nodes between bipartite sets": "Any",
    "specify the name for the union graph": "Any",
    "center of the voronoi cells": "Any",
    "for example": "Any",
    "number of ranked nodes to extract": "Any",
    "maximum number of iterations to rank nodes": "Any",
    "ordered list of computed seeds": "Any",
    "model parameter": "Any",
    "is calculated": "Any",
    "y_max)": "Any",
    "node labels are the integers 0 to n - 1": "Any",
    "shortest_path_length function": "Any",
    "windmill graph with n cliques of size k": "Any",
    "001": "Any",
    "pair of nodes and p is their wic measure": "Any",
    "text encoding": "Any",
    "in the list": "Any",
    "specify which encoding to use when writing file": "Any",
    "highest_protocol": "Any",
    "the path naming the file to which to write the graph": "Any",
    "if true add '>>graph6<<' string to head of data": "Any",
    "we infer in graphml that both are floats": "Any",
    "output directory for the two shapefiles": "Any",
    "if true add '>>sparse6<<' string to head of data": "Any",
}

